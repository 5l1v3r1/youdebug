package org.kohsuke.autodbg;

import com.sun.jdi.ObjectReference;
import com.sun.jdi.ThreadReference;
import com.sun.jdi.VirtualMachine;
import com.sun.jdi.request.BreakpointRequest;
import com.sun.jdi.request.EventRequest;
import com.sun.jdi.request.InvalidRequestStateException;

import java.util.List;

/**
 * Possibly multiple {@link BreakpointRequest}s bundled into one unit for convenient use.
 *
 * @author Kohsuke Kawaguchi
 */
public class BundledBreakpointRequest implements EventRequest {

    private final List<BreakpointRequest> requests;

    /*package*/ BundledBreakpointRequest(List<BreakpointRequest> requests) {
        this.requests = requests;
    }

    /**
     * Restricts the events generated by this request to those in
     * the given thread.
     * @param thread the thread to filter on.
     * @throws InvalidRequestStateException if this request is currently
     * enabled or has been deleted.
     * Filters may be added only to disabled requests.
     */
    public void addThreadFilter(ThreadReference thread) {
        for (BreakpointRequest r : requests)
            r.addThreadFilter(thread);
    }

    /**
     * Restricts the events generated by this request to those in
     * which the currently executing instance is the object
     * specified.
     * <P>
     * Not all targets support this operation.
     * Use {@link VirtualMachine#canUseInstanceFilters()}
     * to determine if the operation is supported.
     * @since 1.4
     * @param instance the object which must be the current instance
     * in order to pass this filter.
     * @throws java.lang.UnsupportedOperationException if
     * the target virtual machine does not support this
     * operation.
     * @throws InvalidRequestStateException if this request is currently
     * enabled or has been deleted.
     * Filters may be added only to disabled requests.
     */
    public void addInstanceFilter(ObjectReference instance) {
        for (BreakpointRequest r : requests)
            r.addInstanceFilter(instance);
    }

    @Override
    public boolean isEnabled() {
        return one().isEnabled();
    }

    @Override
    public void setEnabled(boolean val) {
        for (BreakpointRequest r : requests)
            r.setEnabled(val);
    }

    @Override
    public void enable() {
        setEnabled(true);
    }

    @Override
    public void disable() {
        setEnabled(false);
    }

    @Override
    public void addCountFilter(int count) {
        for (BreakpointRequest r : requests)
            r.addCountFilter(count);
    }

    @Override
    public void setSuspendPolicy(int policy) {
        for (BreakpointRequest r : requests)
            r.setSuspendPolicy(policy);
    }

    @Override
    public int suspendPolicy() {
        return one().suspendPolicy();
    }

    @Override
    public void putProperty(Object key, Object value) {
        one().putProperty(key,value);
    }

    @Override
    public Object getProperty(Object key) {
        return one().getProperty(key);
    }

    @Override
    public VirtualMachine virtualMachine() {
        return one().virtualMachine();
    }

    private BreakpointRequest one() {
        return requests.get(0);
    }
}
