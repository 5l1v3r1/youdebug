package org.kohsuke.youdebug;

import com.sun.jdi.Location;
import com.sun.jdi.ObjectReference;
import com.sun.jdi.ThreadReference;
import com.sun.jdi.VirtualMachine;
import com.sun.jdi.request.BreakpointRequest;
import com.sun.jdi.request.InvalidRequestStateException;
import com.sun.jdi.request.ClassPrepareRequest;

import java.util.List;

/**
 * Possibly multiple {@link BreakpointRequest}s bundled into one unit for convenient use.
 *
 * @author Kohsuke Kawaguchi
 */
public class BundledBreakpointRequest extends BundledEventRequestWithClassPrepare<BreakpointRequest> implements BreakpointRequest {

    /*package*/ BundledBreakpointRequest(ClassPrepareRequest req, List<BreakpointRequest> requests) {
        super(req, requests);
    }

    /*package*/ BundledBreakpointRequest(List<BreakpointRequest> requests) {
        this(null,requests);
    }

    /**
     * Restricts the events generated by this request to those in
     * the given thread.
     * @param thread the thread to filter on.
     * @throws InvalidRequestStateException if this request is currently
     * enabled or has been deleted.
     * Filters may be added only to disabled requests.
     */
    public void addThreadFilter(ThreadReference thread) {
        for (BreakpointRequest r : requests)
            r.addThreadFilter(thread);
    }

    /**
     * Restricts the events generated by this request to those in
     * which the currently executing instance is the object
     * specified.
     * <P>
     * Not all targets support this operation.
     * Use {@link VirtualMachine#canUseInstanceFilters()}
     * to determine if the operation is supported.
     * @since 1.4
     * @param instance the object which must be the current instance
     * in order to pass this filter.
     * @throws java.lang.UnsupportedOperationException if
     * the target virtual machine does not support this
     * operation.
     * @throws InvalidRequestStateException if this request is currently
     * enabled or has been deleted.
     * Filters may be added only to disabled requests.
     */
    public void addInstanceFilter(ObjectReference instance) {
        for (BreakpointRequest r : requests)
            r.addInstanceFilter(instance);
    }

    public Location location() {
        return one().location();
    }
}
